from abc import ABC, abstractmethod

# Абстрактний об'єкт-обробник
class Handler(ABC):
    @abstractmethod
    def handle_request(self, request):
        pass

    @abstractmethod
    def set_successor(self, successor):
        pass

# Конкретний об'єкт-обробник
class ConcreteHandlerA(Handler):
    def handle_request(self, request):
        if request == "A":
            return "ConcreteHandlerA: Handling request A."
        elif self._successor:
            return self._successor.handle_request(request)
        else:
            return "ConcreteHandlerA: Can't handle the request."

    def set_successor(self, successor):
        self._successor = successor

# Інший конкретний об'єкт-обробник
class ConcreteHandlerB(Handler):
    def handle_request(self, request):
        if request == "B":
            return "ConcreteHandlerB: Handling request B."
        elif self._successor:
            return self._successor.handle_request(request)
        else:
            return "ConcreteHandlerB: Can't handle the request."

    def set_successor(self, successor):
        self._successor = successor

# Використання
handler_a = ConcreteHandlerA()
handler_b = ConcreteHandlerB()

handler_a.set_successor(handler_b)

result_a = handler_a.handle_request("A")
print(result_a)

result_b = handler_a.handle_request("B")
print(result_b)

result_c = handler_a.handle_request("C")
print(result_c)
